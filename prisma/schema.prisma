generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String        @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  userAccounts  UserAccount[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserAccount {
  id     String @id @default(uuid())
  userId String
  name   String @default("Default Account")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exchanges  Exchange[]
  orders     Order[]
  positions  Position[]
  signalBots SignalBot[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_account")
}

model Exchange {
  id            String       @id @default(uuid())
  userId        String
  userAccountId String
  name          String
  accountName   String?
  apiKey        String
  apiSecret     String
  isActive      Boolean      @default(true)
  positionMode  PositionMode @default(OneWay)
  totalValue    Float?       @default(0)
  lastSyncedAt  DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userAccount   UserAccount  @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  signalBots    SignalBot[]

  @@map("exchange")
}

model Order {
  id            String      @id @default(uuid())
  symbol        String
  side          OrderSide
  type          OrderType
  price         Float
  quantity      Float
  value         Float
  status        OrderStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  positionId    String?     @unique
  userAccountId String
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  position      Position?

  @@map("order")
}

model Position {
  id               String         @id @default(uuid())
  userAccountId    String
  orderId          String?        @unique
  symbol           String
  side             PositionSide
  type             PositionType
  entryPrice       Float
  quantity         Float
  entryValue       Float
  entryTime        DateTime
  status           PositionStatus @default(Open)
  exitPrice        Float?
  exitTime         DateTime?
  exitValue        Float?
  profit           Float?
  profitPercentage Float?
  leverage         Int?
  stopLoss         Float?
  takeProfit       Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  order            Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userAccount      UserAccount    @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  logs             PositionLog[]

  @@map("position")
}

model PositionLog {
  id         String   @id @default(uuid())
  positionId String
  message    String
  createdAt  DateTime @default(now())
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@map("position_log")
}

model SignalBot {
  id            String   @id @default(uuid())
  name          String
  description   String? // Optional description for the bot
  userAccountId String
  exchangeId    String
  symbols       String[] @default([]) // Trading pairs
  isActive      Boolean  @default(true)

  // Entry Settings - Simple
  orderType OrderType @default(Market) // Market or Limit only

  // Amount per Trade - Simplified
  portfolioPercent Float  @default(20) // Percentage of portfolio per trade
  leverage         Float? @default(1) // Leverage multiplier

  // Exit Strategies - Simple
  stopLoss   Float? // Stop loss percentage
  takeProfit Float? // Take profit percentage

  // Webhook Configuration
  webhookUrl    String? // Generated webhook URL
  webhookSecret String? // Secret for webhook validation

  // Alert Messages - Simple (4 signals only)
  enterLongMsg  String?
  exitLongMsg   String?
  enterShortMsg String?
  exitShortMsg  String?

  // Statistics
  totalTrades   Int   @default(0)
  winningTrades Int   @default(0)
  totalPnl      Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAccount UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  exchange    Exchange    @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  signals     Signal[]
  botTrades   BotTrade[]

  @@map("signal_bot")
}

model Signal {
  id          String       @id @default(uuid())
  botId       String
  action      SignalAction
  symbol      String
  price       Float?
  quantity    Float? // Custom quantity if specified
  message     String?
  strategy    String?
  timeframe   String?
  processed   Boolean      @default(false)
  processedAt DateTime?
  error       String?
  createdAt   DateTime     @default(now())

  bot      SignalBot @relation(fields: [botId], references: [id], onDelete: Cascade)
  botTrade BotTrade?

  @@map("signal")
}

model BotTrade {
  id               String         @id @default(uuid())
  botId            String
  signalId         String?        @unique
  symbol           String
  side             PositionSide
  entryPrice       Float
  quantity         Float
  entryValue       Float
  entryTime        DateTime
  status           BotTradeStatus @default(Open)
  exitPrice        Float?
  exitTime         DateTime?
  exitValue        Float?
  profit           Float?
  profitPercentage Float?

  // Simple Exit Strategies
  stopLoss   Float?
  takeProfit Float?

  // Order Details
  orderType OrderType @default(Market)
  leverage  Float?    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bot    SignalBot @relation(fields: [botId], references: [id], onDelete: Cascade)
  signal Signal?   @relation(fields: [signalId], references: [id], onDelete: SetNull)

  @@map("bot_trade")
}

enum OrderType {
  Market
  Limit
  Stop
}

enum OrderStatus {
  Pending
  Filled
  Canceled
}

enum OrderSide {
  Buy
  Sell
}

enum PositionSide {
  Long
  Short
}

enum PositionType {
  Buy
  Sell
}

enum PositionStatus {
  Open
  Closed
  Canceled
}

enum PositionMode {
  OneWay
  Hedge
}

enum SignalAction {
  ENTER_LONG
  EXIT_LONG
  ENTER_SHORT
  EXIT_SHORT
}

enum BotTradeStatus {
  Open
  Closed
  Canceled
}
