# Database Configuration
# PostgreSQL connection string
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
# 
# Local Development:
#   DATABASE_URL="postgresql://postgres:password@localhost:5432/bytix"
# 
# AWS RDS:
#   DATABASE_URL="postgresql://username:password@your-rds-instance.region.rds.amazonaws.com:5432/bytix"
# 
# Neon.tech (Serverless PostgreSQL):
#   DATABASE_URL="postgresql://username:password@ep-xxx.region.aws.neon.tech/neondb?sslmode=require"
# 
# Supabase:
#   DATABASE_URL="postgresql://postgres:password@db.xxx.supabase.co:5432/postgres"
#
DATABASE_URL="postgresql://user:password@host:5432/database"

# Better Auth Configuration
# Generate a random secret with: openssl rand -base64 32
# IMPORTANT: Keep this secret and never commit it to version control
# 
# Generate on Linux/Mac/WSL:
#   openssl rand -base64 32
# 
# Generate on Windows (PowerShell):
#   $bytes = New-Object byte[] 32; (New-Object Security.Cryptography.RNGCryptoServiceProvider).GetBytes($bytes); [Convert]::ToBase64String($bytes)
#
BETTER_AUTH_SECRET="your-super-secret-key-here-generate-with-openssl"

# Base URL of your application
# IMPORTANT: Update this for your environment
# 
# Local Development:
#   BETTER_AUTH_URL="http://localhost:3000"
# 
# Production (EC2 with domain):
#   BETTER_AUTH_URL="https://yourdomain.com"
# 
# Production (EC2 without domain):
#   BETTER_AUTH_URL="http://YOUR_EC2_PUBLIC_IP"
#
BETTER_AUTH_URL="https://yourdomain.com"

# Google OAuth Configuration
# Get these from: https://console.cloud.google.com/apis/credentials
# Required for Google Sign-In functionality
# 
# Setup Instructions:
# 1. Go to https://console.cloud.google.com/apis/credentials
# 2. Create a new project or select existing one
# 3. Create OAuth 2.0 Client ID (Web application)
# 4. Add authorized redirect URIs:
#    - http://localhost:3000/api/auth/callback/google (for development)
#    - https://yourdomain.com/api/auth/callback/google (for production)
# 5. Copy the Client ID and Client Secret here
#
GOOGLE_CLIENT_ID="your-google-client-id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# Node Environment
# Use 'production' for production deployment
# Use 'development' for local development
NODE_ENV="production"

# Optional: Port Configuration (defaults to 3000)
# Change this if port 3000 is already in use
# PORT=3000

# Optional: Hostname Configuration
# HOSTNAME="0.0.0.0"

# Optional: Binance API Configuration (if using for testing)
# Get these from: https://www.binance.com/en/my/settings/api-management
# BINANCE_API_KEY="your-binance-api-key"
# BINANCE_API_SECRET="your-binance-api-secret"

# ===========================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ===========================================
# 
# Before deploying to production, ensure:
# ✓ DATABASE_URL points to your production database (RDS/Neon/Supabase)
# ✓ BETTER_AUTH_SECRET is a secure random string (openssl rand -base64 32)
# ✓ BETTER_AUTH_URL matches your production domain (https://yourdomain.com)
# ✓ GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET are from Google Cloud Console
# ✓ Google OAuth redirect URI includes your production domain
# ✓ NODE_ENV is set to "production"
# ✓ All secrets are kept secure and not committed to git
# 
# For EC2 Deployment:
# ✓ EC2 security group allows HTTP (80) and HTTPS (443)
# ✓ Domain DNS A record points to your EC2 Elastic IP
# ✓ PM2 is configured to restart on system reboot
# ✓ Nginx is configured as reverse proxy
# 
# See DEPLOY_EC2.md for complete deployment instructions

